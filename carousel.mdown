# jQuery carousel ride
This project was designed to teach me how to make a jQuery carousel. I will be using a few tools to help me complete this project.

So first off I will explain what sources I have looked at for inspiration and reference. Listed bellow are my sources.

* **jCarousel  - Riding carousels with jQuery**

[jCarousel](http://sorgalla.com/jcarousel/docs/)

jCarousel is really neat! Jan Sorgalla has put together a bunch of really cool carousels for you to use in your projects. I really like the simplicity to his code base and the design of this carousels. I've decided to implement parts of his skeleton carousel as simple base for my carousel. Another really awesome part about his site is that he has a cook book recipe for creating responsive carousels. Def worth checking it out!

* **Stack over flow post**
[Simple carousel](http://stackoverflow.com/questions/12068734/jquery-simple-image-slideshow-tutorial)

Really simple carousel concept. I will be using part of this post and implementing it into my skeleton of jCarousel.

# Lets get to work

So now that I have shared with you my references I'd like to now specify the steps to creating the carousel.

### The Markup!
So first we need to create our markup. This is the HTML of course.

### Container divs

We need a `div` container for all of our images to hangout inside. This container needs to be centered to the middle of the page. So we will give our carousel wrapper `div` a class of `.carousel-wrapper` and right underneath it we will make another `div` wrapper which will be called `carousel` and will contain a `ul` element that contains separate `li` elements which will contain our `img` files.

```html
<!--Containers-->
<div class="carousel-wrapper">
    <div class="carousle">
        <ul style="left:-1800px; top:0px;">
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        </div>
    </ul>
</div>
```
### Images go inside the container!

So if you look at the markup above you will notice that we have two container divs. Each container is like the glue that is holding all of our content together.

### Next and Prev buttons!

Now we need to create prev and next buttons so we can slide through the images. The mark up for this is really minimal.

We can achieve this by adding two links.

```html
<a href="#" class="carousel-control-prev" data-carouselcontrol="true">‹</a>
<a href="#" class="carousel-control-next" 	data-carouselcontrol="true">›</a>
```
### Image Count!

Our last step is give the user some info on what image they are currently on. We can achieve this by adding a pagination feature.

So for the pagination feature to take place we want to create markup that allows us to have a bunch of numbers to click on.

This markup is again really simple and straight forward. We are wrapping our links inside of a `p` class of `carousel-pagination`.

```html
<p class="carousel-pagination">
    <a href="#">1</a>
    <a href="#">2</a>
    <a href="#">3</a>
    <a href="#">4</a>
</p>

```
When the user clicks on the number link we will trigger an event which will allow for the picture allocated to that number to be seen.

# Our Base CSS

## div wrapper1

So our HTML has been set but our page has image placeholders all over the place! Not to worry we can fix this with three blocks of css code.

We should work our way down the HTML file and start styling where we see our first `div` container.

The first `div` we see is right after the `<body>` tag and its called `wrapper` So in our `styles.css` file we want to make our `div class` of `wrapper` be set to `display:block;`

Setting our `wrapper` to `block` makes it a block-level container box. A block-level container box or a block-level box is a box that contains only *block-level boxes or creates an inline formating context which contains only inline boxes*  

Read more on this topic at MDN (Visual formatting model)[https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Visual_formatting_model]

Block-level boxes participate in the [block formating context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context). This means that each block-level element generates at least one block-level box which is called the *principal block-level box*

```css
.wrapper{
    display:block;
}
```

## div wrapper 2
Our second `div` is our `visual-area` which is what it says it is..the visible area of the carousel.

`position` must be set to `relative`!!
`overflow` is set to `hidden` because we want to hide all the images from the view
`margin` is set to `0 auto` to center up our carousel in the middle of the page.
`width` can be in `px` or in `%`

```css
.visual-area{
    position:relative;
    overflow:hidden;
    margin: 0 auto;
    width:600px;
}
```
## div wrapper 3

Our third `div` container that we need to select is our `.carousle` container. We **Must make sure** that the `position` is either `relative` or `absolute` and that our `width` is long enough to span all of our images.

Remember that the `carousle` container contains the `img` attributes inside the `ul` element which contains separate `li` elements? Well it turns out that we need to select the `ul` element within our `carousle`. Why would we want to do that? Let me explain..

The reason for selecting the the `ul` is because we don't want to have the little bullet dots next to each image and `ul`s come with bullets by default due to there nature of being un-ordered.

So to get rid of the bullets we need to use the css property of `list-style:none;`  


```css
.carousle ul {
    width: 20000em;
    position: relative;
    list-style:none;
    margin:0;
    padding:0;
}
```

So we have selected the `carousle` class once and we need to now select it again. This is because we need to select it again and this time we need to select it with the `li` element and give it the css property of `float:left;`

We are floating left because we want all of our images be hidden on the left inside the container.
