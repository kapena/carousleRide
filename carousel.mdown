# jQuery carousel ride
This project was designed to teach me how to make a jQuery carousel. I will be using a few tools to help me complete this project.

So first off I will explain what sources I have looked at for inspiration and reference. Listed bellow are my sources.

* **jCarousel  - Riding carousels with jQuery**

[jCarousel](http://sorgalla.com/jcarousel/docs/)

jCarousel is really neat! Jan Sorgalla has put together a bunch of really cool carousels for you to use in your projects. I really like the simplicity to his code base and the design of this carousels. I've decided to implement parts of his skeleton carousel as simple base for my carousel. Another really awesome part about his site is that he has a cook book recipe for creating responsive carousels. Def worth checking it out!

* **Stack over flow post**
[Simple carousel](http://stackoverflow.com/questions/12068734/jquery-simple-image-slideshow-tutorial)

Really simple carousel concept. I will be using part of this post and implementing it into my skeleton of jCarousel.

# Lets get to work

So now that I have shared with you my references I'd like to now specify the steps to creating the carousel.

### The Markup!
So first we need to create our markup. This is the HTML of course.

### Container divs

We need a `div` container for all of our images to hangout inside. This container needs to be centered to the middle of the page. So we will give our carousel wrapper `div` a class of `viewable-area` and right underneath it we will make another `div` wrapper which will be called `carousel` and will contain a `ul` element that contains separate `li` elements which will contain our `img` files.

```html
<!--Containers-->
<div class="viewable-area">
    <div class="carousle">
        <ul style="left:-1800px; top:0px;">
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        <li>
            <img src="http://placehold.it/600x500" alt="">
        </li>
        </div>
    </ul>
</div>
```
### Images go inside the container!

So if you look at the markup above you will notice that we have two container divs. Each container is like the glue that is holding all of our content together.

### Next and Prev buttons!

Now we need to create prev and next buttons so we can slide through the images. The mark up for this is really minimal.

We can achieve this by adding two links.

```html
<a href="#" class="carousel-control-prev">‹</a>
<a href="#" class="carousel-control-next">›</a>
```
### Image Count!

Our last step in the markup stage is that we need give the user some info on what image they are currently on. We can achieve this by adding a pagination feature.

For this to take place we want to create markup that allows us to have a bunch of numbers to click between.

This markup is really simple and straight forward. We are wrapping our links inside of a `p` class of `carousel-pagination`.

```html
<p class="carousel-pagination">
    <a href="#">1</a>
    <a href="#">2</a>
    <a href="#">3</a>
    <a href="#">4</a>
</p>
```
When the user clicks on the number link we will trigger an event which will allow for the picture allocated to that number to be seen.

# Our Base CSS

## Container 1

So our HTML has been set but if we look at our page it has image placeholders all over the place!

Not to worry we can fix this with three initial blocks of css code.

We should work our way down the HTML file and start styling where we see our first `div` container.

The first `div` we see is right after the `<body>` tag and its called `wrapper` So in our `styles.css` we want to make our `div class` of `wrapper` be set to `display:block;`

Setting our `wrapper` to `block` makes it a block-level container box. A block-level container box or a block-level box is a box that contains only *block-level boxes or creates an inline formatting context which contains only inline boxes*  

If you want to learn more on this topic then take a read through [Visual formatting model](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Visual_formatting_model) at MDN

Block-level boxes participate in the[block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context). This means that each block-level element generates at least one block-level box which is called the *principal block-level box*

```css
.wrapper{
    display:block;
}
```

## Container 2
Our second `div` is our `visual-area` which is what it says it is..the visible area of the carousel.

* `position` must be set to `relative`
* `overflow` is set to `hidden` because we want to hide all the images from  the view
* `margin` is set to `0 auto` to center up our carousel in the middle of the page.
* `width` can be fixed `px` or flexible `%`

```css
.visual-area{
    position:relative;
    overflow:hidden;
    margin: 0 auto;
    width:600px;
}
```
## Container 3

Our third `div` that we need to select is `.carousle`

* `position` must be either `relative` or `absolute`

* `width` must be long enough to hold all of our images.

I'm sure that you remember that the `carousle` contains `li` elements that hold our `img` attributes and it turns out that we need to select the `ul` element within our `carousle`. Why would we want to do that?


The reason for selecting the the `ul` is because we don't want to have little bullets next to each images.

`ul` elements come packaged with bullets by default, due to there nature of being un-ordered.

So to get rid of the bullets we need to use the css property of `list-style:none;`

```css
.carousle ul {
    width: 20000em;
    position: relative;
    list-style:none;
    margin:0;
    padding:0;
}
```

So we have selected the `carousle` class once and we need to now select it again. Why again?!

The reason for selecting our `.carousle` `div` for the second time is because we need to select our `li` elements and give them the css property of `float:left;`

We are floating left because we want all of our images be hidden on the left inside the container.

# jQuery Functionality

Using jQuery is going to enable our carousel to slide back and forth when a user clicks on the buttons.

## Set the variables

So to start out we want to set a variable which is going to hold the transition speed between our images as we change them out.

```javascript
var transitionSpeed = 3000;
```
The next two variables that we want to set are going to query the DOM. The first variable is going to fetch the images.

In our first variable we are targeting the `ul` element and then querying using the `children` method to search out the `li` elements.

In our second variable we are targeting the class of `.carousel-pagination` and then using the children method find links `a`.

```javascript
// fetching the images
var listItems = $('ul').children('li');
// fetching the links to each image (pagination)
var pagination = $('.carousel-pagination').children('a');
```
Now we have two variables in place that are going to find our items in the DOM. The next step is to set up two more variables that are going to allow our program to search though each individual image in an automated manner.

Our new variable named `listLength` is going to access the `length` property on our `listItems`. This allows the program to know how many images we have.

The last variable that we want to set is going to be the current position setter. This enables us to start counting through each image starting at the number `0`. So to do that we create a variable named currentPosition and give it the value of `0`.

```javascript
var listLength = listItems.length;
var currentPosition = 0;
```
