# The jQuery Cycle Ride
This project was designed to teach me how to make a jQuery image slider.

Initially I was going to make something on the lines of this [Simple carousel](http://stackoverflow.com/questions/12068734/jquery-simple-image-slideshow-tutorial) but I got tied up with the code I decided to go at it differently.

Like most things when you start out for the first time you run I into a few issues, things not working like they should while struggling to understand what the heck is wrong with your code..I'm sure you know the feeling.
So in feeling a little lost I decided to write a [stack over flow post](http://stackoverflow.com/questions/30471572/not-able-to-get-my-if-else-statement-logic-to-work) regarding the my issue. With a little bit of analyzing I was able to resolve the problem, however I still felt like something was not right.

So I went to irc jQuery and asked around on how I should approach this project. Someone really nice there showed me a concept that really inspired me. So I crafted these notes to teach me how to implement the concept that was initially shown to me. Feel free to follow along and learn from my process.  


# Lets get to work

### The Markup!
So first we need to create our markup.

### Container divs

We need three `div` containers. The first `div` container is going to be our
`wrapper` which is going to contain the next two divs. The next `div` we want to add is going to be our `visual-area` this is where all the things visual will be presented. The last `div` is going to be called `carousel` which is going to contain all of our images inside of an `ul` un-ordered list.

```*.html
<div class="wrapper">
<div class="visual-area">
    <div class="carousel">
    <ul>
        <li class="off image_0" data-image="0">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_1" data-image="1">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_2" data-image="2">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_3" data-image="3">
            <img src="http://placehold.it/600x500">
        </li>
    </div>
    </ul>
</div>
```

## Classes
Our `li` elements that contain each of the images need to have classes. This is so we can find them when we use jQuery later. We specifying each `li` with a class of `off` for the images that we don't see and we specify the class of `on` for the first image that will see when we first start the carousel. Each `li`  also has a `data` attribute. The data attribute is going to contain the image numbers. So in this case we have 4 images but we are indexing from `0` so we actually have `3` images as far as javascript is concerned.


### Next and Prev buttons!

We need to create prev and next buttons so we can slide through the images. The mark up for this is really minimal.

We can achieve this by adding two links.

```HTML
<!--Prev & Next-->
<a href="#" class="next">Prev</a>
<a href="#" class="prev">Next</a>
```
# Our Base CSS

## Container 1

So our HTML has been set but if we look at our page it has image placeholders all over the place!

Not to worry we can fix this with three initial blocks of css code.

We should work our way down the HTML file and start styling where we see our first `div` container.

The first `div` we see is right after the `<body>` tag and its called `wrapper` So in our `styles.css` we want to make our `div class` of `wrapper` be set to `display:block;`

Setting our `wrapper` to `block` makes it a block-level container box. A block-level container box or a block-level box is a box that contains only *block-level boxes or creates an inline formatting context which contains only inline boxes*  

If you want to learn more on this topic then take a read through [Visual formatting model](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Visual_formatting_model) at MDN

Block-level boxes participate in the [block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context). This means that each block-level element generates at least one block-level box which is called the *principal block-level box*

```css
.wrapper{
    display:block;
}
```

## Container 2
Our second `div` is our `visual-area` which is the visual-area of the carousel

* `position` must be set to `relative`
* `margin` is set to `0 auto` to center up our carousel in the middle of the page.
* `width` is set to `600px`
```css
.visual-area{
    position:relative;
    width:600px;
}
```
## Container 3

Our third `div` that we need to select is `.carousle`

* `position` is `relative`

* `width` must be long enough to hold all of our images.

I'm sure that you remember that the `carousle` contains `li` elements that hold our `img` attributes.

So it turns out that we need to select the `ul` element within our `carousle`. Why would we want to do that? The reason for selecting the the `ul` is because we don't want to have little bullets next to each images. To get rid of the bullets we need to use the css property of `list-style-type:none`

```css
.carousle ul {
    position: relative;
    list-style-type :none;
    margin: 0;
    padding: 0;
}
```

## Selecting multiple elements
We now want to select the `carousle` class and the `ul` `li` elements and give them some CSS property's. To achieve selecting multiple elements we need to use the `>` symbol which selects the direct descendant elements from where you wish to specify selecting. In this case we are selecting from `ul` to `li`

```css
.carousle > ul > li{
    display: relative;
    float: left;
    top: 20px;
    bottom: 20px;
}
```

We are floating left because we want all of our images be hidden on the left inside the container.

# jQuery Functionality

Using jQuery is going to enable our carousel to slide back and forth when a user clicks on the **Next** and **Prev** buttons!

## Document Ready!
We need to get our Document ready!

```javascript
$(document).ready(function(){
// set event
});
```

# Event
To start out we need to set up a event handler on our `next` link. We want our event to occur when the user clicks on the next link.

```javascript
$(document).ready(function(){
// set the event
$('.next').on('click',function () {
    // iterate the DOM with each method
    });
});
```

# Iterating the DOM
Once our event has been set then we need to create a loop. The loop is going to be done with the `each(function())` method.

## Each method
So how dose the `each()` method work? `each()` makes DOM looping concise.
When `each()` is called upon it iterates over DOM elements that are apart of the jQuery object. Every time the callback runs, it is passed the current loop iteration, beginning from `0`.

## The Callback
The callback in the each method is fired in the context of the current DOM element so the keyword `this` refers to the element.

### Example
A simple un-ordered list

```HTML
<ul>
  <li>foo</li>
  <li>bar</li>
</ul>
```
With the `each()` method you can select the elements and iterate over each one.

```javascript
$('li').each(function(index){
    // iterating over each `li` element
    alert($( index + ": " + $( this ).text() );
});
```
Notice how we are using `index` as the counter and this as the reference to the element.

Our result will alert us the following

1. 0: foo
2. 1: bar

## Each Image
We want the `each()` method to iterate over all of our images. To accomplish this task we first need to provide the `each()` method with some parameters. The first parameter is going to be `index` which is going to start at `0`  then the second parameter is going to be `element` which is referencing our current DOM element.

**Note**

In this case we are using `element` as our parameter to find the current DOM element. If you wish you could do away with the`element` keyword and instead use the`this` keyword in our `if` statement to reference our current DOM `element`.

```javascript
$(document).ready(function(){
    // setting an event handler on the `next` class  
    $('.next').on('click',function(){
    // intreating through `ul` and `li` elements with the each method
    // `>` selects the direct descendant elements
    $('ul > li').each(function(index,element){
        // logic  
        });
    });
});
```
# Logic!
Now we need to apply some logic into our code. Without the logic our images won't be able to interchange!

## First if statement
The first `if` statement is going to enclose our second `if` statement like so
```javascript
if(expression) {
    // Statement
    if (expression){
            // Statement
    }
    else {
        // Statement
    }
}
```
### Condition

`if` `element` has a class of `on` and evaluates to `true` then run a statement.

### Statement

The statement must find the `element` and then access the `data-image` attribute attached to our images.

**Hint**

Our first statement inside of the first `if` is going to need a variable name. Remember that we are going to iterate through each image's `data-image` attribute and these attributes are numbers!

It would be wise to use a variable name that represents a number.

## Second if statement

### Conditions
In the first condition we want to check if the number of arguments our`image_` is receiving is greater than the number of `0`. If we get a `truthy` value then our second condition will we processed.

In the second condition we want to see if (number + 1)` is `truthy`. If both our conditions evaluate to `truthy` then our second `if` statement will execute it's statement.

### Statement
The statement in our second `if` is going to assign the class of `next` to the variable `number` and add `number` by `1` each time the loop iterates. This allows are images to move on by one each time next is clicked.

### Else
If our `if` statements where to fail then we need statement that will be executed in place of them failing. This is where we use the `else` statement. Inside our `else` statement we want to execute the following, `next` is assigned to `0`

```javascript
$(document).ready(function(){
    // click function which will execute next link
    $('.next').on('click',function(){
        // selecting `ul` elements and there direct descendants `li`
        //  using the each method to iterate over DOM
        $('ul > li').each(function (index, element) {
            //  if `element` hasClass('on') then
            if ($(element).hasClass('on')) {
                // use the number variable to access the `element` in the data-image attribute
                var number = $(element).data('image');
            // first condition
            // if `image_`s number of arguments is greater than 0 is`truthy`
            // second condition
            // if  (number + 1) is `truthy` then
            if ($('.image_' + (number + 1).length > 0)){
                // next is assigned to number
                // add number by `1` each time we iterate
                next = number + 1;
            }
            // if false then next is 0
                else {
                    next = 0;
                }
            }
    });
});
```
# Take a breather!
The logic part in our code is by far the most tricky. In the beginning I struggled to figure out how this worked. Take your time to digest this and be proud of your self for spending time on something that is difficult.

During my breather I took a few minutes to design a simple illustration on how code logic above is working. Take a look!

![Alt Text](http://s21.postimg.org/fw2wzl6on/Understanding_Logic.jpg)

# Understanding Asynchronous and Synchronous
I think it's highly use full for us to understand how asynchronous and synchronous execution work. If we grasp this idea then the next section of code will be much easier to understand. So I have gone into some detail to explain how this process works.

## Asynchronous def
An Asynchronous operation means that a process operates independently of other processes.

## Asynchronous execution
> When you execute something asynchronously you can move onto another task before it finishes.

Here is a visual representation I created of what an asynchronous execution looks like.

* `A` is first in line and is given a task to do. When `A` receives his task he decides to go work on it in the background and step out of line for a minute. So the line then moves onto `B`.

* `B` then says, I'll also go work in the background so we can move onto `C`! This pattern keeps going onward till we reach our last letter.  

![](https://s3-us-west-2.amazonaws.com/designdiagrams/any1.JPG)

Whats really cool about this is that we can use `A` and `B` while `C` and `D` are still working in the background. We don't need to wait for the entire process to finish.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/asy2.JPG)

## Synchronous def
A Synchronous operation means that the process runs only as a result of the other processes being executed.

## Synchronous execution
> When you execute something synchronously you wait for it to finish before moving to the next task.

Here is a visual representation of how a synchronous execution works.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/sny1.JPG)


`A`,`B`,`C` and `D` all happen in a single series.

`A` will run then finish then `B` will run then finish and so on until the cycle is finished. With synchronous execution we haft to wait for the entire process to finish.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/sny2.JPG)

## Deferreds
At a high-level, deferreds can be thought of as a way to represent asynchronous operations which can take a long time to complete. They're the asynchronous alternative to blocking functions and the general idea is that rather than your application blocking while it awaits some request to complete before returning a result, a deferred object can instead be returned immediately. You can then attach callbacks to the deferred object: they will be called once the request has actually completed.

[Deferreds](https://learn.jquery.com/code-organization/deferreds/)

So deferrends can be returned immediately vs having to wait for a asynchronous function.

## Promises are't they nice!
A promise represents a value that may not be available yet.
Promises work with jQuery specific listeners which are `done()` and `fail()`

In its most basic form, a "promise" is a model that provides a solution for the concept of deferred (or future) results in software engineering. The main idea behind it:

> Rather than executing a call which may result in blocking, we instead return a promise for a future value that will eventually be satisfied.

A promise can end up being in two different states:

* Resolved: Data is available
* Rejected: Something went wrong and no value is available.

[More on promises](https://learn.jquery.com/code-organization/deferreds/)

# jQuery documentation on .promise()

`.promise( [type ] [, target ] )`

The promise method returns a dynamically generated promise that is resolved when all actions of a certain type bound to the collection, queued or not, have ended.

By default, `type` is `"fx"`, which means *the returned Promise is resolved when all animations of the selected elements have completed*.

Resolve context and sole argument is the collection onto which `.promise()` has been called.

If `target` is provided, `.promise()` will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.

**Note: The returned Promise is linked to a Deferred object stored on the `.data()` for an element.**

## jQuery documentation on .done()
The `deferred.done()` method accepts one or more arguments, all of which can be either a single function or an array of functions.

When the Deferred is resolved, the doneCallbacks are called.

# Adding the Promise  
We need to add a `promise()` right after our enclosing `if` statement. What is the promise doing? The promise is going to be representing the future value of our animation that we have not received yet.

# Done method  
Once we have added our `promise()` we then need to add the the `done()` method. which accept a parameter as a function.

```javascript
done(function(){
    // find something, do something
    });
```

```javascript
$(document).ready(function(){
    // event
    $('next').on('click',function(){
        // loop
        $('ul > li').each(function(element, index)
        // first if statement
        if ($('element').hasClass('on')){
            var number = $('element').data('image');
        // second if statement
        if ($('.image_' + (number + 1)).length > 0){
            next = number + 1;
        }
        else {
            next = 0;
        }
    }  
    // promise
}).promise().done(function(){

});

});

```
## On and Off classes
The two CSS classes bellow each have `on` and `off` classes. When these classes are triggered `on` and `off` the the images perform a transition animation.

Think of it like a light switch...

Removing the class of `on` and adding the class of `off` will communicate to our css that we want to interchange the class of `on` to `off` that then triggers the animation property's we set in the class.

```css
/*Turn Off*/
.carousle > ul > li.on {}
/*Turn On*/
.carousle > ul > li.off {}

```
Removing the class of `on` then adding the class of `off`
```javascript
// remove class of `on` add class of `off`
 $('.carousle > ul > li').removeClass('on').addClass('off');
```

## Removing off and adding on
In our HTML we have individual `li` classes and each has a class name `on image_0, off image_1, off image_2, off image_3`

The above code is going to switch out our classes in the CSS which will trigger the animations but it's not going to be effective if it can't find each list item or image inside of the DOM, so at this point the code above is just adding and removing classes from our css but not really doing anything to our actual images therefore we won't see any effect when we click the next link.

So we need to find our list items, images and the next class so we can update the DOM when a new image comes into view. We want the DOM to reflect the class change from `off` to `on` when a new image comes into view.

`$('li. image_' + next )` Notice how I don't search for `off`  or `on` but instead I just look for `li` elements and the class of `image_`  

I also don't give `image_` a number to start with. This is because we want to always start cycling at the index of `0`

```javascript
// remove the class of `off` on `li` element that is currently displaying the image.
$('li. image_' + next).removeClass('off').addClass('on');
```
## Code

```javascript
$(document).ready(function(){
    // click function which will execute next link
    $('.next').on('click',function(){
        // selecting `ul` elements and there direct descendants `li`
        //  using the each method to iterate over DOM
        $('ul > li').each(function (index, element) {
            //  if `element` hasClass('on') then use
            if ($(element).hasClass('on')) {
                // the number variable to access the `element` in the data-image attribute
                var number = $(element).data('image');
                // if number of arguments is less than 0 and
                // number - 1 is truthy then
            if ($('.image_' + (number + 1).length > 0)){
                // next is assigned to number
                // add number by `1` each time we iterate
                next = number + 1;
            }
            // if false then next is 0
                else {
                    next = 0;
                }
            }
        // promise
        }).promise().done(function(){
            // remove class of `on` add class of `off` trigger animation
            $('.carousle > ul > li').removeClass('on').addClass('off');
            // Remove the class of `off` on `li` element that is currently displaying the image.
            // Display `on` when image is in view
            $('li.image_' + next).removeClass('off').addClass('on');
        });
    });
});
```
## CSS animation!

Creating the animation between images in CSS is quite simple. There are a few approaches to wether to use jQuery or CSS for animation. In this example I have decided to use CSS to animate the images.

The GPU is highly optimized for tasks like moving pixels around and applying transform matrices and opacity, so modern browsers try to offload those tasks from the CPU to the GPU.

> Declaring your animations in CSS allows the browser to determine which elements should get GPU layers, and divvy them up accordingly.

Read more about this approach here [CSS animations vs jQuery animations ](https://css-tricks.com/myth-busting-css-animations-vs-javascript/)

## Image transitions
Our image is going to **`transition`** when the class of `on` has been removed and the class of `off` has been added and then **`transition`** again when the class of `on` has been added and `off` removed.

We are changing out the opacity through a transition animation.

```css
.carousle > ul > li .off {
    opacity:0;
    transition: opacity 0.2s linear;  
    -web-kit-trasition:opacity 0.2s linear;
}
```

```css
.carousle > ul > li .on {
    opacity:1;
    transition: opacity 0.2s linear;
    -web-kit-transition: opacity 0.2 linear;

}
```
# Previous image
So we can move forward thats awesome but what about backwards? Well we could def use a previous button! How might that work?

If we click on the previous link then we want our image to cycle backwards.
To achieve this we need to set up a previous link and  when it is clicked we iterate through each image backwards till we get to the first image in the series.

Our jQuery code is going to be almost be a mirror image of what we have above but there's two small details that we need to change. I'll give you a hint for the first one, being the we are using a new link and we are giving it a class name of `prev` then that means that we need to access the class of `prev` and create a brand new event for it.

Now try you'r hand at it.

## Solution

If you were able to get to the solution then that's great! If not then just follow my steps here and practice again and again till it sinks in.

So we first need to create an entirely new event on the `prev` class. Then we need to create our loop. Once these two things have been taken care of we can then move onto the logic.  

Inside of our first `if` statement we want to see `if` `element` has a class of `on`.

Inside the second `if` statement is where the second change occurs. Instead of adding `number` + `1` we need to minus `number` - `1` this allows us to move backwards through out each image. The rest of our code is exactly the same as our pervious code.

```javascript
// finding the `prev` class
$('.prev').on('click',function(){
    // loop through each element
    $('carousle > ul > li').each(function(index,element){
        // if element has class of on then
        if ($(element).hasClass('on')){
            // access the element and find the data attribute of `image`
            var number = $(element).data('image');
            // if image_ arguments is greater than 0
            // if number - 1 is `truthy` then
            if($('.image_' + (number - 1)).length > 0){
                // prev is assigned to next - 1
                prev = number - 1;
            }
            else {
                // if above expressions fail
                // prev is assigned to 0
                prev = 0;
            }
       }
    // promise
    }).promise().done(function(){
        // remove class of `on` add class of `off`
        $('.carousle > ul > li').removeClass('on').addClass('off');
        // update `li` elements when we remove class of `off`
        // and add class of `on`
        $('li.image_').removeClass('off').addClass('on');
    });
});

```
# Good for you
If you have followed this post and liked it then share it for others to learn from to. Thank you for reading :)
