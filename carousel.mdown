# The jQuery Slide Ride
This project was designed to teach me how to make a jQuery carousel. I will be using a few tools to help me complete this project.

So first off I will explain what sources I have looked at for inspiration and reference. Listed bellow are my sources.

* **jCarousel  - Riding carousels with jQuery**

[jCarousel](http://sorgalla.com/jcarousel/docs/)

jCarousel is really neat! Jan Sorgalla has put together a bunch of really cool carousels for you to use in your projects. I really like the simplicity to his code base and the design of this carousels. I've decided to implement parts of his skeleton carousel as simple base for my carousel. Another really awesome part about his site is that he has a cook book recipe for creating responsive carousels. Def worth checking it out!

* **Stack over flow post**
[Simple carousel](http://stackoverflow.com/questions/12068734/jquery-simple-image-slideshow-tutorial)

Really simple carousel concept. I will be using part of this post and implementing it into my skeleton of jCarousel.

# Lets get to work

So now that I have shared with you my references I'd like to now specify the steps to creating the carousel.

### The Markup!
So first we need to create our markup. This is the HTML of course.

### Container divs

We need a `div` container for all of our images to hangout inside. This container needs to be centered to the middle of the page. So we will give our carousel wrapper `div` a class of `viewable-area` and right underneath it we will make another `div` wrapper which will be called `carousel` and will contain a `ul` element that contains separate `li` elements which will contain our `img` files.

```*.html
<div class="wrapper">
<!--Container-->
<div class="visual-area">
    <div class="carousle">
    <ul>
        <li class="off image_0" data-image="0">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_1" data-image="1">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_2" data-image="2">
            <img src="http://placehold.it/600x500">
        </li>
        <li class="off image_3" data-image="3">
            <img src="http://placehold.it/600x500">
        </li>
    </div>
    </ul>
</div>
```
### Images go inside the container!

So if you look at the markup above you will notice that we have two container divs. Each container is like the glue that is holding all of our content together.

### Next and Prev buttons!

Now we need to create prev and next buttons so we can slide through the images. The mark up for this is really minimal.

We can achieve this by adding two links.

```HTML
<!--Prev & Next-->
<a href="#" class="next">Prev</a>
<a href="#" class="prev">Next</a>
```

### Image Count!

Our last step in the markup stage is that we need give the user some info on what image they are currently on. We can achieve this by adding a pagination feature.

For this to take place we want to create markup that allows us to have a bunch of numbers to click between.

This markup is really simple and straight forward. We are wrapping our links inside of a `p` class of `carousel-pagination`.

```HTML
<p class="carousel-pagination">
    <a href="#">1</a>
    <a href="#">2</a>
    <a href="#">3</a>
    <a href="#">4</a>
</p>
```
When the user clicks on the number link we will trigger an event which will allow for the picture allocated to that number to be seen.

# Our Base CSS

## Container 1

So our HTML has been set but if we look at our page it has image placeholders all over the place!

Not to worry we can fix this with three initial blocks of css code.

We should work our way down the HTML file and start styling where we see our first `div` container.

The first `div` we see is right after the `<body>` tag and its called `wrapper` So in our `styles.css` we want to make our `div class` of `wrapper` be set to `display:block;`

Setting our `wrapper` to `block` makes it a block-level container box. A block-level container box or a block-level box is a box that contains only *block-level boxes or creates an inline formatting context which contains only inline boxes*  

If you want to learn more on this topic then take a read through [Visual formatting model](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Visual_formatting_model) at MDN

Block-level boxes participate in the[block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context). This means that each block-level element generates at least one block-level box which is called the *principal block-level box*

```css
.wrapper{
    display:block;
}
```

## Container 2
Our second `div` is our `visual-area` which is the visual-area of are carousel

* `position` must be set to `relative`
* `overflow` is set to `hidden` because we want to hide all the images from  the view
* `margin` is set to `0 auto` to center up our carousel in the middle of the page.
* `width` can be fixed `px` or flexible `%`

```css
.visual-area{
    position:relative;
    overflow:hidden;
    margin: 0 auto;
    width:600px;
}
```
## Container 3

Our third `div` that we need to select is `.carousle`

* `position` must be either `relative` or `absolute`

* `width` must be long enough to hold all of our images.

I'm sure that you remember that the `carousle` contains `li` elements that hold our `img` attributes and it turns out that we need to select the `ul` element within our `carousle`. Why would we want to do that?


The reason for selecting the the `ul` is because we don't want to have little bullets next to each images.

`ul` elements come packaged with bullets by default, due to there nature of being un-ordered.

So to get rid of the bullets we need to use the css property of `list-style:none;`

```css
.carousle ul {
    width: 20000em;
    position: relative;
    list-style:none;
    margin:0;
    padding:0;
}
```
So we have selected the `carousle` class once and we need to now select it again. Why again?!

The reason for selecting our `.carousle` `div` for the second time is because we need to select our `li` elements and give them the css property of `float:left;`

We are floating left because we want all of our images be hidden on the left inside the container.

# jQuery Functionality Fun!

Using jQuery is going to enable our carousel to slide back and forth when a user clicks on the **Next** and **Prev** buttons!

## Document Ready!
We need to get our Document ready!

```javascript
$(document).ready(function(){
// set event
});
```

# Event
To start out we need to set up a event handler on our `next` link. We want our event to occur when the user clicks on the next link.

```javascript
$(document).ready(function(){
// set the event
$('.next').on('click',function () {
    // iterate the DOM
    });
});
```

# Iterating the DOM
Once our event has been set then we need to create a loop. The loop is going to be done with the `each(function())` method.

## Each method
So how dose the `each()` method work? `each()` makes DOM looping concise.
When `each()` is called upon it iterates over DOM elements that are apart of the jQuery object. Every time the callback runs, it is passed the current loop iteration, beginning from `0`.

## The Callback
The callback in the each method is fired in the context of the current DOM element so the keyword `this` refers to the element.

### Example
A simple un-ordered list

```HTML
<ul>
  <li>foo</li>
  <li>bar</li>
</ul>
```
With the `each()` method you can selects the elements and iterate over them like so

```javascript
$('li').each(function(index){
    // iterating over each `li` element
    alert($( index + ": " + $( this ).text() );
});
```
Notice how we are using `index` as the counter and this as the reference to the element.

Our result will alert us the following

0: foo
1: bar

## Each Image
We want the `each()` method to iterate over all of our images. To accomplish this task we first giving our `each()` method some parameters. The first parameter is going to be the `index` which is going to start at `0`  then the second parameter is going to be `element` which is referencing our current DOM element.

**NOTE**

In this case we are using `element` as our parameter to find the current DOM element. If you wish you could do away with the`element` keyword and instead use the`this` keyword in our `if` statement to reference our current DOM `element`.

```javascript
$(document).ready(function(){
    // setting an event handler on the `next` link
    $('.next').on('click',function(){
    // intreating through `ul` and `li` elements with the each method
    // `>` selects the direct descendant elements
    $('ul > li').each(function(index,element){
        //  set if else statement
        });
    });
});
```
# Logic!
Now we need to apply some logic into our code. Without the logic our images won't be able to interchange!

## First if statement
The first `if` statement is going to enclose our second `if` statement like so
```javascript
if(expression) {
    // Statement
    if (expression){
            // Statement
    }
}
```
### Condition

`if` `element` has a class of `on` and evaluates to `true` then run a statement.

### Statement

The statement must find our `element` and then access the `data-image` attribute attached to our images.

**Hint**

Our first statement inside of the first `if` is going to need a variable name. Remember that we are going to iterate through each image's `data-image` attribute and these attributes are numbers!

It would be wise to use a variable name that represents a number. We can set the variable name as a parameter in our `each()` method.

## Second if statement

### Conditions
The first thing we need to do is in our second `if` statement is access the `image_` class. In the first condition we want to check the number of arguments `each()` method is receiving is greater that `0` which will evaluate to a boolean (true or false).

In the second condition we want to check if `image_ + (number + 1)` is `true`. If both our conditions evaluate to `true` then our `if` statement will execute the statement within.

### Statement
The statement in our second `if` is going to assign the class of `next` to the variable `number` and add `number` by `1` each time the loop iterates.

### Else
If our `if` statements where to fail then we need  statement that will be executed in place of them failing. This is where we use the `else` statement. Inside our `else` statement we want to execute the following, `next` is assigned to `0`

```javascript
$(document).ready(function(){
    // click function which will execute next link
    $('.next').on('click',function(){
        // selecting `ul` elements and there direct descendants `li`
        //  using the each method to iterate over DOM
        $('ul > li').each(function (index, element, number) {
            //  if `element` hasClass('on') then use
            if ($('element').hasClass('on')) {
                // the number variable to access the `element` in the data-image attribute
                number = $('element').data('image');
            // first condition
            // if number of arguments is greater than 0 is`true`
            // second condition
            // if `image_` + (number + 1) is `true` then
            if ($('image_' + (number + 1).length > 0)){
                // next is assigned to number
                // add number by `1` each time we iterate
                next = number + 1;
            }
            // if false then next is 0
                else {
                    next = 0;
                }
            }
        // promise
        }).promise().done(function(){
            // removing `carousle > ul > li` from css
            $('.carousle > ul > li').removeClass('off').addClass('on');
            // moving to next image each time next is clicked
            $('li. image_' + next).removeClass('off').addClass('on');
        });
    });
});
```
# Take a breather!
The logic part in our code is by far the most tricky. I struggled to figure out how this worked. Seriously take your time to digest this. It's not easy stuff.

Be proud of your self for spending time on something that is difficult. You are going to get this..It's just a matter of time :)

During my breather I took a few minutes to design a simple illustration on how code logic above is working. Take a look!

![Alt Text](http://s21.postimg.org/fw2wzl6on/Understanding_Logic.jpg)

# Understanding Asynchronous and Synchronous
I think it's highly use full for us to understand how asynchronous and synchronous execution work. If we grasp this idea then the next section of code will be much easier to understand. So I have gone into some detail to explain how

## Asynchronous def
An Asynchronous operation means that a process operates independently of other processes.

## Asynchronous execution
> When you execute something asynchronously you can move onto another task before it finishes.

Here is a visual representation I created of what an asynchronous execution looks like.

* `A` says, I'll go work in the background so we can move onto `B`

* `B` then begins and says, I'll also go work in the background so we can move onto `C` this pattern keeps going onward till we reach our last letter.  

![](https://s3-us-west-2.amazonaws.com/designdiagrams/any1.JPG)

Whats really cool about this is that we can put `A` and `B` to use  while `C` and `D` are still working in the background. We don't need to wait for the entire process to finish.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/asy2.JPG)

## Synchronous def
A Synchronous operation means that the process runs only as a result of the other processes being executed.

## Synchronous execution
> When you execute something synchronously you wait for it to finish before moving to the next task.

Here is a visual representation of how a synchronous execution works.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/sny1.JPG)


`A`,`B`,`C` and `D` all happen in a single series.

`A` will run then finish then `B` will run then finish and so on until the cycle is finished. With synchronous execution we haft to wait for the entire process to finish.

![](https://s3-us-west-2.amazonaws.com/designdiagrams/sny2.JPG)

## Deferreds
At a high-level, deferreds can be thought of as a way to represent asynchronous operations which can take a long time to complete. They're the asynchronous alternative to blocking functions and the general idea is that rather than your application blocking while it awaits some request to complete before returning a result, a deferred object can instead be returned immediately. You can then attach callbacks to the deferred object: they will be called once the request has actually completed.

[Deferreds](https://learn.jquery.com/code-organization/deferreds/)

So deferrends can be returned immediately vs having to wait for a asynchronous function.

## Promises are't they nice!
A promise represents a value that may not be available yet.
Promises work with jQuery specific listeners which are `done()` and `fail()`

In its most basic form, a "promise" is a model that provides a solution for the concept of deferred (or future) results in software engineering. The main idea behind it:

> Rather than executing a call which may result in blocking, we instead return a promise for a future value that will eventually be satisfied.

A promise can end up being in two different states:

* Resolved: Data is available
* Rejected: Something went wrong and no value is available.

[More on promises](https://learn.jquery.com/code-organization/deferreds/)

# jQuery documentation on .promise()

`.promise( [type ] [, target ] )`

The promise method returns a dynamically generated promise that is resolved when all actions of a certain type bound to the collection, queued or not, have ended.

By default, `type` is `"fx"`, which means *the returned Promise is resolved when all animations of the selected elements have completed*.

Resolve context and sole argument is the collection onto which `.promise()` has been called.

If `target` is provided, `.promise()` will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.

**Note: The returned Promise is linked to a Deferred object stored on the `.data()` for an element.**

## jQuery documentation on .done()
The `deferred.done()` method accepts one or more arguments, all of which can be either a single function or an array of functions.

When the Deferred is resolved, the doneCallbacks are called.

# Adding the Promise  
We need to add a `promise()` right after our enclosing `if` statement. What is the promise doing? The promise is going to be representing the future value of our animation that we have not received yet.

# Done function
Once we have added our `promise()` we then need to add the the `done()` method. which accept a parameter as a function.

`done(function(){
    // do something
    });`

```javascript
$(document).ready(function(){
    // event
    $('next').on('click',function(){
        // loop
        $('ul > li').each(function(element, index, number)
        // logic
        if ($('element').hasClass('on')){
            number = $('element').data('image');

        if ($('image_' + (number + 1)).length > 0){
            next = number + 1;
        }
        else {
            next = 0;
        }
    }  
    // promise
}).promise().done(function(){

});

});

```
## Removing from the CSS
Now that we have our `promise()` and `done()` methods in place we need to do something with them. So what do we want to do with them? We first want to go find the following `carousle > ul > li` and then use the `addClass` and `removeClass` methods to effectively add and remove these elements as a class to the CSS.

```javascript
 $('carousle > ul > li').removeClass('on').addClass('off');
```

What this is doing is removing the class of `carousle > ul > li` from the CSS while also making sure that it is not being added.  

## Adding to the CSS
We need to now add a class to the CSS of `li.'image_' + next`  
```javascript
$('li. image_' + next).removeClass('off').addClass('on');
```
This is now adding a new image each time we click on the next link.

## Code 

```javascript
$(document).ready(function(){
    // click function which will exicute next link
    $('.next').on('click',function(){
        // selecting `ul` elements and there direct descendants `li`
        //  using the each method to interate over DOM
        $('ul > li').each(function (index, element, number) {
            //  if `element` hasClass('on') then use
            if ($('element').hasClass('on')) {
                // the number variable to access the `element` in the data-image attribute
                number = $('element').data('image');
            // first condition
            // if number of arguments is greater than 0 is`true`
            // second condition
            // if `image_` + (number + 1) is `true` then
            if ($('image_' + (number + 1).length > 0)){
                // next is assigned to number
                // add number by `1` each time we iterate
                next = number + 1;
            }
            // if false then next is 0
                else {
                    next = 0;
                }
            }
        // promise
        }).promise().done(function(){
            // removing `carousle > ul > li` from css
            $('.carousle > ul > li').removeClass('off').addClass('on');
            // moving to next image each time next is clicked
            $('li. image_' + next).removeClass('off').addClass('on');
        });
    });
});
```
